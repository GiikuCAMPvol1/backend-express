import { AlgorithmProblems } from "./types/algorithmProblems";

export const algorithm_problems: AlgorithmProblems = {
  easy: [
    "文字列「Code Connect」を標準出力してください。",
    "文字列「Hello, World!」だけが書き込まれたテキストファイルを生成してください。",
    "「hello.txt」という名前のファイルを open し、何も書き込まずに close してください。",
    "4649 が偶数か奇数か判定し、「偶数」、「奇数」のどちらか正しい方を標準出力してください。",
    "引数に整数 N をとり、1 以上 N 以下の整数の総和を返す関数を実装してください。",
    "引数に整数の配列をとり、含まれる整数の最大値を返す関数を実装してください。",
    "引数に整数の配列をとり、含まれる整数の総和を返す関数を実装してください。",
  ],
  normal: [
    "引数に整数をとり、それが素数か素数でないかを返す関数を実装してください。",
    "引数に正の整数をとり、その平方根を返す関数を実装してください。",
    "引数に整数の配列をとり、それを降順にソートした配列を返す関数を実装してください。",
    "引数に文字列をとり、それを反転させた文字列を返す関数を実装してください。",
    "引数に正の整数をとり、それを2進数で表記した文字列を返す関数を実装してください。",
    "引数に正の整数をとり、それを16進数で表記した文字列を返す関数を実装してください。",
    "1 以上 100 以下の整数をランダムに1つ、標準出力してください。",
  ],
  hard: [
    "引数に整数 N をとり、N 番目のフィボナッチ数を返す関数を実装してください。",
    "引数に整数の配列 A と整数 N をとり、A に N が含まれているかを二分探索で判定して返す関数を実装してください。A が降順にソート済みでない場合はエラー処理してください。",
    "引数にふたつの正の整数をとり、それらの最大公約数と最小公倍数を返す関数を実装してください。",
    "引数に二次元配列をとり、それを転置した（行と列を入れ替えた）配列を返す関数を実装してください。",
    "push, pop, peek が可能なスタック（LIFO; Last-In, First-Out）のクラスを実装してください。",
    "enqueue, dequeue, peek が可能なキュー（FIFO; FIrst-In, First-Out）のクラスを実装してください。",
    "コメントで面白いことを書いてください。",
  ],
};
